#
# For development purposes ONLY
# See https://docs.edlib.com/docs/developers/getting-started/
#

volumes:
  mailpit_data:
  meilisearch_data:
  moodle_data:
  mysql:
  npm_cache:
  postgres_data:

services:

  # ===
  # Hub
  # ===

  hub:
    build:
      context: sourcecode/hub
      target: dev
    depends_on:
      certs: { condition: service_completed_successfully }
      chromedriver: { condition: service_started }
      meilisearch: { condition: service_healthy }
      postgres: { condition: service_healthy }
    healthcheck:
      test: [CMD, nc, -z, localhost, '9000']
    volumes:
      - ./sourcecode/hub:/srv/www/hub
      - ./data/nginx/ca:/usr/local/share/ca-certificates:ro
    working_dir: /srv/www/hub

  hub-vite:
    image: node:18-alpine
    command: [sh, -c, 'npm ci && npm run dev']
    volumes:
      - npm_cache:/root/.npm
      - ./sourcecode/hub:/srv/www/hub
    working_dir: /srv/www/hub


  # ==============
  # Content Author
  # ==============

  contentauthor:
    image: nginx:1-alpine
    healthcheck:
      test: [CMD, curl, -f, http://localhost]
    volumes:
      - ./sourcecode/apis/contentauthor/docker/contentAuthor.conf.template:/etc/nginx/templates/contentAuthor.conf.template:ro
      - ./sourcecode/apis/contentauthor/docker/no-security-theatre.conf:/etc/nginx/conf.d/no-security-theatre.conf:ro
      - ./sourcecode/apis/contentauthor/public:/app/public
      - ./sourcecode/apis/contentauthor/storage:/app/storage
      - ./sourcecode/apis/contentauthor/vendor/h5p/h5p-editor:/app/public/h5p-editor-php-library:ro
      - ./sourcecode/apis/contentauthor/vendor/h5p/h5p-core:/app/public/h5p-php-library:ro
    environment:
      PHP_FPM_HOST: "contentauthor-fpm:9000"
    depends_on:
      contentauthor-fpm: { condition: service_healthy }

  contentauthor-fpm:
    build:
      context: ./sourcecode/apis/contentauthor
      target: dev
    depends_on:
      certs: { condition: service_completed_successfully }
      mysql: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file:
      - ./localSetup/projects/content-author/.env
      - ./localSetup/.env
    command: /startup.sh
    healthcheck:
      test: [CMD, nc, -z, localhost, "9000"]
    volumes:
      - ./localSetup/projects/content-author/startup.sh:/startup.sh
      - ./sourcecode/apis/contentauthor:/app
      - ./data/nginx/ca:/usr/local/share/ca-certificates:ro

  contentauthor-cron:
    build:
      context: ./sourcecode/apis/contentauthor
      dockerfile: Dockerfile
      target: dev
    command: [sh, -c, 'while true; do php /app/artisan schedule:run -q; sleep 60; done']
    depends_on:
      contentauthor-fpm: { condition: service_healthy }
    env_file:
      - ./localSetup/projects/content-author/.env
      - ./localSetup/.env
    volumes:
      - ./data/nginx/ca:/usr/local/share/ca-certificates:ro
      - ./sourcecode/apis/contentauthor:/app

  contentauthor-horizonqueue:
    build:
      context: ./sourcecode/apis/contentauthor
      dockerfile: Dockerfile
      target: dev
    command: [php, artisan, queue:work, -v]
    depends_on:
      contentauthor-fpm: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file:
      - ./localSetup/projects/content-author/.env
      - ./localSetup/.env
    volumes:
      - ./data/nginx/ca:/usr/local/share/ca-certificates:ro
      - ./sourcecode/apis/contentauthor:/app

  contentauthor-watch:
    image: node:16-alpine
    command: [sh, -c, 'npm ci && npm run watch']
    volumes:
      - npm_cache:/root/.npm
      - ./sourcecode/apis/contentauthor:/app
    working_dir: /app


  # ===
  # Web
  # ===

  nginx:
    image: nginx:1-alpine
    depends_on:
      certs: { condition: service_completed_successfully }
    environment:
      - EDLIB_ROOT_DOMAIN=${EDLIB_ROOT_DOMAIN:-edlib.test}
    healthcheck:
      test: [CMD, curl, -f, https://localhost]
    volumes:
      - ./data/nginx/ca:/usr/local/share/ca-certificates:ro
      - ./data/nginx/certs:/etc/ssl/private:ro
      - ./localSetup/projects/nginx/defaults.conf:/etc/nginx/conf.d/defaults.conf:ro
      - ./localSetup/projects/nginx/docker-entrypoint.d/update-ca-certificates.sh:/docker-entrypoint.d/update-ca-certificates.sh:ro
      - ./localSetup/projects/nginx/includes:/etc/nginx/includes:ro
      - ./localSetup/projects/nginx/templates:/etc/nginx/templates:ro
      - ./sourcecode/hub/public:/srv/www/hub/public:ro
      - ./sourcecode/hub/storage/app/public:/srv/www/hub/storage/app/public:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      default:
        aliases:
          - api.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - ca.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - hub.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - hub-test.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - hub-vite-hmr.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - hub-ndla-legacy.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - hub-test-ndla-legacy.${EDLIB_ROOT_DOMAIN:-edlib.test}
          - nynorobot.${EDLIB_ROOT_DOMAIN:-edlib.test}


  # ==================
  # Auxiliary services
  # ==================

  certs:
    build: ./localSetup/projects/certs
    command: [generate-certs.sh]
    volumes:
      - ./localSetup/projects/certs/generate-certs.sh:/usr/local/bin/generate-certs.sh:ro
      - ./data/nginx/certs:/etc/ssl/private
      - ./data/nginx/ca:/usr/local/share/ca-certificates

  chromedriver:
    build: ./localSetup/projects/chromedriver
    cap_add:
      - SYS_ADMIN
    depends_on:
      certs: { condition: service_completed_successfully }
    volumes:
      - ./data/nginx/ca:/usr/local/share/ca-certificates

  mailpit:
    image: axllent/mailpit
    environment:
      MP_DATA_FILE: /data/mailpit.db
    healthcheck:
      test: [CMD, sh, -c, 'wget --no-verbose --tries=1 --spider http://localhost:8025/livez || exit 1']
    volumes:
      - mailpit_data:/data

  meilisearch:
    image: getmeili/meilisearch:v1.8
    environment:
      MEILI_NO_ANALYTICS: 'true'
      MEILI_MASTER_KEY: masterkey1234567
    healthcheck:
      test: [CMD, curl, -f, http://localhost:7700/health]
    volumes:
      - meilisearch_data:/meili_data

  mysql:
    image: mariadb:11
    environment:
      MARIADB_ROOT_PASSWORD: mysqlpassword
      MARIADB_INITDB_SKIP_TZINFO: 1
    healthcheck:
      test: [CMD, mariadb, -uroot, -pmysqlpassword, "-eSELECT 1"]
    command: --init-file /data/application/init.sql
    volumes:
      - ./localSetup/projects/mysql/init.sql:/data/application/init.sql
      - mysql:/var/lib/mysql
    ports:
      - "3306:3306"

  nynorobot:
    image: php:8.3-fpm-alpine
    volumes:
      - ./sourcecode/mock/nynorobot:/srv/www/nynorobot:ro

  postgres:
    image: postgres:16-alpine
    healthcheck:
      test: [CMD, pg_isready]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./localSetup/projects/postgres/postgresinit.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: thepgpassword
      PGUSER: postgres
    ports:
      - 5432:5432

  redis:
    image: "redis:alpine"
    healthcheck:
      test: [CMD, redis-cli, ping]
    ports:
      - "6379:6379"


  # =====
  # Misc.
  # =====
  
  docs:
    image: node:16-alpine
    command: [sh, -c, 'yarn && yarn run start --host=0.0.0.0 --port=80']
    volumes:
      - npm_cache:/root/.npm
      - ./docs:/app
    working_dir: /app

  moodle:
    build: ./localSetup/projects/moodle
    volumes:
      - moodle_data:/var/www/moodledata
      - ./localSetup/projects/moodle/php.ini:/usr/local/etc/php/conf.d/zz-moodle.ini:ro
