<?php

namespace Tests\Questionset;

use App\H5pLti;
use App\Libraries\H5P\Interfaces\H5PAdapterInterface;
use Illuminate\Http\Response;
use Illuminate\Support\Str;
use Tests\TestCase;
use App\QuestionSet;
use Tests\Traits\MockUserService;
use Tests\Traits\MockVersioningTrait;
use Tests\Traits\WithFaker;
use App\QuestionSetQuestion;
use App\QuestionSetQuestionAnswer;
use App\Events\QuestionsetWasSaved;
use Tests\Traits\MockLicensingTrait;
use Tests\Traits\MockMetadataService;
use App\Http\Requests\ApiQuestionsetRequest;
use App\Http\Controllers\QuestionSetController;
use Illuminate\Foundation\Testing\RefreshDatabase;

class QuestionSetControllerTest extends TestCase
{

    use RefreshDatabase, WithFaker, MockLicensingTrait, MockMetadataService, MockVersioningTrait, MockUserService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->app->instance('requestId', $this->faker->uuid());
    }

    /**
     * @test
     */
    public function updateQuestionset()
    {
        $this->expectsEvents(QuestionsetWasSaved::class);

        $questionsets = factory(QuestionSet::class, 3)
            ->create()
            ->each(function (QuestionSet $questionset, $index) {
                $questionset->questions()
                    ->save(factory(QuestionSetQuestion::class)->make(['order' => $index]))
                    ->each(function (QuestionSetQuestion $question, $index) {
                        $question
                            ->answers()
                            ->save(factory(QuestionSetQuestionAnswer::class)->make(['order' => $index]));
                    });
            });

        $this->withSession(["authId" => "user_1"]);

        $questionset = $questionsets->random();
        $question = $questionset->questions()->first();
        $answer = $question->answers()->first();
        $json = [
            'title' => "New title",
            'tags' => ['list', 'of', 'tags', 'goes', 'here'],
            'cards' => [
                (object)[
                    'id' => $question->id,
                    'order' => $question->order,
                    'canDelete' => false,
                    'image' => null,
                    'question' => ['text' => "Updated question"],
                    'answers' => [
                        (object)[
                            'id' => $answer->id,
                            'answerText' => "Updated answer",
                            'isCorrect' => (bool)$answer->correct,
                            'showToggle' => false,
                            'canDelete' => false,
                            'image' => null,
                            'order' => $answer->order
                        ]
                    ]
                ]
            ]
        ];
        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $h5pLti = $this->getMockBuilder(H5pLti::class)->getMock();
        $this->setupMetadataService([
            'setEntityType' => '',
            'setEntityId' => '',
            'createDataFromArray' => '',
            'getData' => [],
            'deleteData' => '',
        ]);
        $questionsetController = new QuestionSetController($h5pLti);
        $questionsetController->update($request, $questionset);

        $this->assertDatabaseHas('question_sets', [
            'id' => $questionset->id,
            'title' => "New title"
        ])
            ->assertDatabaseHas('question_set_questions', [
                'id' => $question->id,
                'question_text' => "Updated question",
                'order' => 0,
            ])
            ->assertDatabaseHas('question_set_question_answers', [
                'id' => $answer->id,
                'answer_text' => "Updated answer",
                'order' => 0,
            ]);

        $json['cards'][] = (object)[
            'id' => $this->faker->md5,
            'order' => ++$question->order,
            'canDelete' => false,
            'question' => ['text' => "New question"],
            'image' => null,
            'answers' => [
                (object)[
                    'id' => $this->faker->md5,
                    'answerText' => "New correct answer",
                    'isCorrect' => true,
                    'showToggle' => false,
                    'canDelete' => false,
                    'image' => null,
                    'order' => $answer->order
                ],
                (object)[
                    'id' => $this->faker->md5,
                    'answerText' => "New wrong answer",
                    'isCorrect' => false,
                    'showToggle' => false,
                    'canDelete' => false,
                    'image' => null,
                    'order' => $answer->order
                ]
            ]
        ];

        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $questionsetController->update($request, $questionset);

        $this->assertDatabaseHas('question_set_questions', [
            'question_set_id' => $questionset->id,
            'question_text' => "New question",
        ])
            ->assertDatabaseHas('question_set_question_answers', [
                'answer_text' => "New correct answer",
                'correct' => '1',
            ])
            ->assertDatabaseHas('question_set_question_answers', [
                'answer_text' => "New wrong answer",
                'correct' => 0,
            ]);

        $json['cards'][0]->answers = [
            (object)[
                'id' => $this->faker->md5,
                'answerText' => "Added answer",
                'isCorrect' => (bool)$answer->correct,
                'showToggle' => false,
                'canDelete' => false,
                'image' => null,
                'order' => 0
            ],
            (object)[
                'id' => $answer->id,
                'answerText' => "Updated answer",
                'isCorrect' => (bool)$answer->correct,
                'showToggle' => false,
                'canDelete' => false,
                'image' => null,
                'order' => 1
            ],
        ];

        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $questionsetController->update($request, $questionset);

        $this->assertDatabaseHas('question_set_question_answers', [
            'question_id' => $question->id,
            'answer_text' => "Added answer",
            'order' => 0,
        ])
            ->assertDatabaseHas('question_set_question_answers', [
                'id' => $answer->id,
                'question_id' => $question->id,
                'answer_text' => "Updated answer",
                'order' => 1,
            ]);


        unset($json['cards'][0]);
        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $questionsetController->update($request, $questionset);
        $this->assertDatabaseMissing('question_set_questions', [
            'id' => $question->id,
            'question_text' => "New question",
        ])
            ->assertDatabaseMissing('question_set_question_answers', [
                'id' => $answer->id,
                'answer_text' => "Updated answer"
            ]);
    }

    /**
     * @test
     */
    public function updateQuestionsetWithMath()
    {
        $this->expectsEvents(QuestionsetWasSaved::class);

        $questionsets = factory(QuestionSet::class, 3)
            ->create()
            ->each(function (QuestionSet $questionset, $index) {
                $questionset->questions()
                    ->save(factory(QuestionSetQuestion::class)->make(['order' => $index]))
                    ->each(function (QuestionSetQuestion $question, $index) {
                        $question
                            ->answers()
                            ->save(factory(QuestionSetQuestionAnswer::class)->make(['order' => $index]));
                    });
            });

        $this->withSession(["authId" => "user_1"]);

        $questionset = $questionsets->random();
        $question = $questionset->questions()->first();
        $answer = $question->answers()->first();
        $json = [
            'title' => "New title",
            'tags' => ['list', 'of', 'tags', 'goes', 'here'],
            'cards' => [
                (object)[
                    'id' => $question->id,
                    'order' => $question->order,
                    'canDelete' => false,
                    'image' => null,
                    'question' => ['text' => '<p>Albert Einstein formula: <span class="math_container">\(E=mc^2\)</span></p>'],
                    'answers' => [
                        (object)[
                            'id' => $answer->id,
                            'answerText' => '<p>The well known Pythagorean theorem \(x^2 + y^2 = z^2\) was proved to be invalid for other exponents.<span class="math_container">\(x^n + y^n = z^n\)</span></p>',
                            'isCorrect' => (bool)$answer->correct,
                            'showToggle' => false,
                            'canDelete' => false,
                            'image' => null,
                            'order' => $answer->order
                        ]
                    ]
                ]
            ]
        ];
        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $h5pLti = $this->getMockBuilder(H5pLti::class)->getMock();
        $this->setupMetadataService([
            'setEntityType' => '',
            'setEntityId' => '',
            'createDataFromArray' => '',
            'getData' => [],
            'deleteData' => '',
        ]);
        $questionsetController = new QuestionSetController($h5pLti);
        $questionsetController->update($request, $questionset);

        $this->assertDatabaseHas('question_sets', [
            'id' => $questionset->id,
            'title' => "New title"
        ])
            ->assertDatabaseHas('question_set_questions', [
                'id' => $question->id,
                'question_text' => '<p>Albert Einstein formula: $$E=mc^2$$</p>',
                'order' => 0,
            ])
            ->assertDatabaseHas('question_set_question_answers', [
                'id' => $answer->id,
                'answer_text' => '<p>The well known Pythagorean theorem \(x^2 + y^2 = z^2\) was proved to be invalid for other exponents.$$x^n + y^n = z^n$$</p>',
                'order' => 0,
            ]);

        $json['cards'][] = (object)[
            'id' => $this->faker->md5,
            'order' => ++$question->order,
            'canDelete' => false,
            'question' => ['text' => "New question"],
            'image' => null,
            'answers' => [
                (object)[
                    'id' => $this->faker->md5,
                    'answerText' => "New correct answer",
                    'isCorrect' => true,
                    'showToggle' => false,
                    'canDelete' => false,
                    'image' => null,
                    'order' => $answer->order
                ],
                (object)[
                    'id' => $this->faker->md5,
                    'answerText' => "New wrong answer",
                    'isCorrect' => false,
                    'showToggle' => false,
                    'canDelete' => false,
                    'image' => null,
                    'order' => $answer->order
                ]
            ]
        ];

        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $questionsetController->update($request, $questionset);

        $this->assertDatabaseHas('question_set_questions', [
            'question_set_id' => $questionset->id,
            'question_text' => "New question",
        ])
            ->assertDatabaseHas('question_set_question_answers', [
                'answer_text' => "New correct answer",
                'correct' => '1',
            ])
            ->assertDatabaseHas('question_set_question_answers', [
                'answer_text' => "New wrong answer",
                'correct' => 0,
            ]);

        $json['cards'][0]->answers = [
            (object)[
                'id' => $this->faker->md5,
                'answerText' => "Added answer",
                'isCorrect' => (bool)$answer->correct,
                'showToggle' => false,
                'canDelete' => false,
                'image' => null,
                'order' => 0
            ],
            (object)[
                'id' => $answer->id,
                'answerText' => "Updated answer",
                'isCorrect' => (bool)$answer->correct,
                'showToggle' => false,
                'canDelete' => false,
                'image' => null,
                'order' => 1
            ],
        ];

        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $questionsetController->update($request, $questionset);

        $this->assertDatabaseHas('question_set_question_answers', [
            'question_id' => $question->id,
            'answer_text' => "Added answer",
            'order' => 0,
        ])
            ->assertDatabaseHas('question_set_question_answers', [
                'id' => $answer->id,
                'question_id' => $question->id,
                'answer_text' => "Updated answer",
                'order' => 1,
            ]);


        unset($json['cards'][0]);
        $request = new ApiQuestionsetRequest([], ['questionSetJsonData' => json_encode($json)]);
        $questionsetController->update($request, $questionset);
        $this->assertDatabaseMissing('question_set_questions', [
            'id' => $question->id,
            'question_text' => "New question",
        ])
            ->assertDatabaseMissing('question_set_question_answers', [
                'id' => $answer->id,
                'answer_text' => "Updated answer"
            ]);
    }

    private function mockH5pLti()
    {
        $h5pLti = $this->getMockBuilder(H5pLti::class)->getMock();
        app()->instance(H5pLti::class, $h5pLti);
    }

    /**
     * @test
     */
    public function updateQuestionsetFullRequest()
    {
        $this->expectsEvents(QuestionsetWasSaved::class);

        $this->setUpLicensing('BY', true);
        $this->setupVersion();
        $this->setupMetadataService([
            'getData' => true,
            'createData' => true,
        ]);
        $this->setupUserService([
            'getUser' => (object)[
                'identity' =>
                    (object)[
                        'firstName' => 'this',
                        'lastName' => 'that',
                        'email' => 'this@that.com',
                    ]
            ]
        ]);

        $this->mockH5pLti();
        $testAdapter = $this->createStub(H5PAdapterInterface::class);
        $testAdapter->method('enableDraftLogic')->willReturn(false);
        $testAdapter->method('getAdapterName')->willReturn("UnitTest");
        app()->instance(H5PAdapterInterface::class, $testAdapter);

        $json = [
            'title' => "New title",
            'tags' => ['list', 'of', 'tags', 'goes', 'here'],
            'cards' => [
                (object)[
                    'order' => 1,
                    'canDelete' => false,
                    'image' => [],
                    'question' => [
                        'text' => "New question",
                        'image' => null,
                    ],
                    'answers' => [
                        (object)[
                            'answerText' => "New answer",
                            'isCorrect' => true,
                            'showToggle' => false,
                            'canDelete' => false,
                            'image' => [],
                            'order' => 1
                        ]
                    ]
                ]
            ]
        ];

        $authId = Str::uuid();
        $this->withSession(["authId" => $authId])
            ->post(route('questionset.store'), [
                'title' => "New title",
                'license' => "BY",
                'questionSetJsonData' => json_encode($json),
                'share' => 'PRIVATE',
            ])
            ->assertStatus(Response::HTTP_CREATED);

        $this->assertDatabaseHas('question_sets', ['title' => "New title", "tags" => "", "is_published" => 1]);

        $storedQuestionSet = QuestionSet::where('title', 'New title')->first();

        $json['title'] = "Updated title";
        $this->withSession(["authId" => $authId])
            ->put(route('questionset.update', $storedQuestionSet->id), [
                'license' => "BY",
                'questionSetJsonData' => json_encode($json),
                'share' => 'PRIVATE',
            ])
            ->assertStatus(Response::HTTP_OK);

        $this->assertDatabaseHas('question_sets', ['title' => "Updated title", "tags" => "", "is_published" => 1]);
        $this->assertCount(1, QuestionSet::all());
    }

    /**
     * @test
     */
    public function updateQuestionsetFullRequestWithDraftEnabled()
    {
        $this->expectsEvents(QuestionsetWasSaved::class);

        $this->setUpLicensing('BY', true);
        $this->setupVersion();
        $this->setupMetadataService([
            'getData' => true,
            'createData' => true,
        ]);
        $this->setupUserService([
            'getUser' => (object)[
                'identity' =>
                    (object)[
                        'firstName' => 'this',
                        'lastName' => 'that',
                        'email' => 'this@that.com',
                    ]
            ]
        ]);

        $this->mockH5pLti();
        $testAdapter = $this->createStub(H5PAdapterInterface::class);
        $testAdapter->method('enableDraftLogic')->willReturn(true);
        $testAdapter->method('getAdapterName')->willReturn("UnitTest");
        app()->instance(H5PAdapterInterface::class, $testAdapter);

        $json = [
            'title' => "New title",
            'tags' => ['list', 'of', 'tags', 'goes', 'here'],
            'cards' => [
                (object)[
                    'order' => 1,
                    'canDelete' => false,
                    'image' => [],
                    'question' => [
                        'text' => "New question",
                        'image' => null,
                    ],
                    'answers' => [
                        (object)[
                            'answerText' => "New answer",
                            'isCorrect' => true,
                            'showToggle' => false,
                            'canDelete' => false,
                            'image' => [],
                            'order' => 1
                        ]
                    ]
                ]
            ]
        ];

        $authId = Str::uuid();
        $this->withSession(["authId" => $authId])
            ->post(route('questionset.store'), [
                'license' => "BY",
                'questionSetJsonData' => json_encode($json),
                'share' => 'PRIVATE',
                'lti_message_type' => "ltirequest",
                'ext_use_draft_logic' => 1,
                'isPublished' => 0,
            ])
            ->assertStatus(Response::HTTP_CREATED);
        $this->assertDatabaseHas('question_sets', ['title' => "New title", "tags" => "", "is_published" => 0]);

        $storedQuestionSet = QuestionSet::where('title', 'New title')->first();

        $json['title'] = "Updated title";
        $this->withSession(["authId" => $authId])
            ->put(route('questionset.update', $storedQuestionSet->id), [
                'license' => "BY",
                'questionSetJsonData' => json_encode($json),
                'share' => 'PRIVATE',
                'lti_message_type' => "ltirequest",
                'ext_use_draft_logic' => 1,
                'isPublished' => 1,
            ])
            ->assertStatus(Response::HTTP_OK);

        $this->assertDatabaseHas('question_sets', ['title' => "Updated title", "tags" => "", "is_published" => 1]);

        $this->withSession(["authId" => $authId])
            ->put(route('questionset.update', $storedQuestionSet->id), [
                'license' => "BY",
                'questionSetJsonData' => json_encode($json),
                'share' => 'PRIVATE',
                'lti_message_type' => "ltirequest",
                'ext_use_draft_logic' => 1,
                'isPublished' => 0,
            ])
            ->assertStatus(Response::HTTP_OK);

        $this->assertDatabaseHas('question_sets', ['title' => "Updated title", "tags" => "", "is_published" => 0]);
        $this->assertCount(1, QuestionSet::all());

    }
}
